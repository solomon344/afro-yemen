"use server";
import { prisma } from "@/lib/prisma";
import nodemailer from "nodemailer";
import {writeFile} from "node:fs/promises"
import path from "node:path";


export const CreateNewsLetter = async (data) => {
  if (await prisma.newsletter.findUnique({ where: { email: data.email } }))
    return "already subscribed to newsletter";
  const newsletter = await prisma.newsletter.create({
    data: {
      name: data.name,
      email: data.email,
    },
  });

  return "Successfully subscribed to newsletter";
};

export const CreateMessage = async (data) => {
  const message = await prisma.message.create({
    data: {
      name: data.name,
      email: data.email,
      content: data.content,
    },
  });
  await sendMail(data);
  return "Message sent successfully";
};

export const GetNewsletters = async () => {
  const newsletters = await prisma.newsletter.findMany();
  return newsletters;
};

const transport = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL_ID,
    pass: process.env.EMAIL_PASSWORD,
  },
  tls: {
    // do not fail on invalid certs
    rejectUnauthorized: false,
  },
});

export const sendMail = async (data) => {
  // console.log(process.env.SM)
  const mailOptions = {
    subject: "Afro-Yemen Site",
    from: data.email,
    to: process.env.EMAIL_ID,
    html: `<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>

    <style>
        *{
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        .el{
            margin: 3px;
            padding: 3px;
        }
    </style>
  </head>
  <body style="font-family: sans-serif; width: 100dvw; align-content: center;">
    <div>
      <div class="el">
        <h3 style="display: inline-block">Name</h3>
        <p style="display: inline-block; padding-left: 4px">${data.name}</p>
      </div>
      <div class="el">
        <h3 style="display: inline-block">Email</h3>
        <a
          href="mailto:${data.email}"
          style="display: inline-block; padding-left: 4px"
          >${data.email}</a
        >
      </div>

      <div class="el">
        <h3 style="display: inline-block">Message</h3>
        <p class="el" style="margin-left: 0px; padding-left: 0px; width: 50%; font-size: small;">
        ${data.content}
        </p>
      </div>
    </div>
  </body>
</html>`,
    envelope: {
      from: `${data.name} <${data.email}>`,
      to: process.env.EMAIL_ID,
    },
  };

  return await transport.sendMail(mailOptions);
};


export const downloadNewsletters = async (fileName)=>{
    const newsletters = await prisma.newsletter.findMany()
    const csv = newsletters.map(nl => ({name: nl.name, email: nl.email })).map(nl => Object.values(nl).join(',')).join('\n')
    const content = "Hello, this is a sample text file generated by Next.js.";

  const filePath = path.join(process.cwd(), "public", fileName);
  
  // Write content to a file
  await writeFile(filePath, csv, "utf-8");

  // Return the public URL (make sure the /public folder is accessible)
  return `${fileName}`;
}